---
name: K0mmand3r (rust, python, & wasm/typescript)
on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
env:
  PROJECT_ROOT: rust/k0mmand3r
  SKIP_TESTS: false
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: run tests ü¶Ä
        if: ${{ env.SKIP_TESTS == 'false' }}
        run: cargo test --all-features
        working-directory: rust/k0mmand3r
      # typescript      ###########################
      # https://github.com/actions/setup-node
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      # we use binstall to install wasm-pack
      - name: Install cargo-binstall
        if: env.SKIP_TESTS == 'false'
        uses: cargo-bins/cargo-binstall@v1.4.9
      - name: run tests ü¶Ñ (typescript)
        if: ${{ env.SKIP_TESTS == 'false' }}
        run: |
          rustup target add wasm32-unknown-unknown
          cargo binstall --no-confirm wasm-pack
          wasm-pack build --target nodejs
          # npx mocha tests/test_k0mmand3r.ts
          npm ci
          npm test
        working-directory: rust/k0mmand3r
      ###########################
      # python
      # üòâ: `maturin generate-ci github`
      ###########################
      - name: maturin setup üêç
        if: env.SKIP_TESTS == 'false'
        uses: PyO3/maturin-action@v1.40.8
        with:
          command: build
          args: --release --out dist --features lang-python
          working-directory: ${{ env.PROJECT_ROOT }}
      - name: python setup üêç
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: run tests üêç (python)
        if: ${{ env.SKIP_TESTS == 'false' }}
        run: |
          python3 -m venv ./venv
          pip install --find-links ./dist k0mmand3r
          # python3 -m unittest discover -s tests
          make pytest
        working-directory: rust/k0mmand3r
      # TODO: upload the crate artifcat so we don't need to recompile.
      - name: Upload wasm artifacts
        if: env.SKIP_TESTS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: node-pkg
          path: ${{ env.PROJECT_ROOT }}/pkg
          if-no-files-found: error
  is-release:
    needs: [run-tests]    ## comment this to test the action:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: is pull request
        run: |
          echo "is pull request (merged)"
          echo ${{ github.event.pull_request.merged }}
      # - uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0
      ## üòì .. after a lot of work this was all moved to release.sh
  release-crate:
    name: Release Rust Crate ü¶Ä
    needs: [is-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      # https://github.com/actions-rs/cargo/issues/6
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATESIO_API_TOKEN }}
      # https://github.com/actions-rs/cargo/issues/6
      - uses: actions-rs/cargo@v1
        with:
          cwd: ${{ env.PROJECT_ROOT }}
          command: build
          args: --manifest-path rust/k0mmand3r/Cargo.toml --release --all-features
      # https://github.com/marketplace/actions/publish-crates
      # https://github.com/katyo/publish-crates
      - uses: katyo/publish-crates@v2
        with:
          check-repo: false
          ignore-unpublished-changes: true
          dry-run: ${{ github.event_name != 'pull_request' }}
          path: ${{ env.PROJECT_ROOT }}
          registry-token: ${{ secrets.CRATESIO_API_TOKEN }}

  release-node:
    name: Release Node ü¶Ñ
    # TODO: https://github.com/marketplace/actions/automated-version-bump
    # This Action bumps the version in package.json and pushes it back to the repo. It is meant to be used on every successful merge to master but you'll need to configure that workflow yourself
    needs: [is-release, is-release]
    runs-on: ubuntu-latest
    steps:
      # - name: Build WASM module
      #   run: |
      #     cargo build --release --target wasm32-unknown-unknown
      #     cargo install wasm-bindgen-cli
      #     wasm-bindgen target/wasm32-unknown-unknown/release/k0mmand3r.wasm --out-dir ./pkg --typescript
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # for publish
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'  # Use the Node.js version that suits your project
      - uses: actions/download-artifact@v4
        with:
          # working-directory: ${{ env.PROJECT_ROOT }}
          name: node-pkg
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Publish to NPM
        ## NOTE: this requires we ran the tests, so if tests are skipped so is this.
        if: env.SKIP_TESTS == 'false'
        run: |
          npm publish --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
  build-python-linux:
    needs: [is-release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64, x86, aarch64, armv7, s390x, ppc64le ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1.40.8
        with:
          working-directory: ${{ env.PROJECT_ROOT }}
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          # working-directory: ${{ env.PROJECT_ROOT }}
          name: wheel-linux-${{ matrix.target }}}
          path: ${{ env.PROJECT_ROOT }}/dist
          if-no-files-found: error

  build-python-windows:
    needs: [is-release]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1.40.8
        with:
          working-directory: ${{ env.PROJECT_ROOT }}
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          # working-directory: ${{ env.PROJECT_ROOT }}
          name: wheels
          path: ${{ env.PROJECT_ROOT }}/dist
          if-no-files-found: error
  build-python-macos:
    needs: [is-release]
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1.40.8
        with:
          working-directory: ${{ env.PROJECT_ROOT }}
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          # working-directory: ${{ env.PROJECT_ROOT }}
          path: ${{ env.PROJECT_ROOT }}/dist
          if-no-files-found: error
  build-python-sdist:
    needs: [is-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1.40.8
        with:
          working-directory: ${{ env.PROJECT_ROOT }}
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ env.PROJECT_ROOT }}/dist
          if-no-files-found: error
  release-python:
    needs: [is-release, build-python-linux, build-python-windows, build-python-macos, build-python-sdist]
    name: Release python üêç
    runs-on: ubuntu-latest
    # if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/download-artifact@v3
        with:
          # working-directory: ${{ env.PROJECT_ROOT }}
          name: wheels
          path: ${{ env.PROJECT_ROOT }}/dist
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1.40.8
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          working-directory: ${{ env.PROJECT_ROOT }}
          command: upload
          args: --non-interactive --skip-existing *

